IMPORT_STATEMENT : import
IDENTIFIER : nahid
TOKEN 25 : ,
IDENTIFIER : miraz
TOKEN 22 : ;
CLASS_DECLARATION : Class
IDENTIFIER : nahid
TOKEN 23 : {
VARIABLE_DECLARATION : var
IDENTIFIER : aa
TOKEN 27 : =
INTEGER_LITERAL : 10
TOKEN 25 : ,
IDENTIFIER : cc
TOKEN 27 : =
FLOAT_LITERAL : 10.01
TOKEN 22 : ;
TOKEN 24 : }
TOKEN 22 : ;
CLASS_DECLARATION : Class
IDENTIFIER : Amit
TOKEN 23 : {
VARIABLE_DECLARATION : var
IDENTIFIER : aax
TOKEN 27 : =
INTEGER_LITERAL : 10
TOKEN 25 : ,
IDENTIFIER : ccx
TOKEN 27 : =
FLOAT_LITERAL : 10.01
TOKEN 22 : ;
TOKEN 24 : }
TOKEN 22 : ;
CLASS_DECLARATION : Class
IDENTIFIER : sazid
TOKEN 23 : {
VARIABLE_DECLARATION : var
IDENTIFIER : xxx
TOKEN 26 : :
DATA_TYPE_STRING : String
TOKEN 22 : ;
VARIABLE_ACCESS : $xxx
TOKEN 27 : =
TOKEN 46 : "abc"
TOKEN 22 : ;
TOKEN 24 : }
TOKEN 22 : ;
VARIABLE_DECLARATION : var
IDENTIFIER : xx
TOKEN 26 : :
DATA_TYPE_INT : Int
TOKEN 22 : ;
FUNCTION : func
IDENTIFIER : add
TOKEN 28 : (
IDENTIFIER : A
TOKEN 26 : :
DATA_TYPE_INT : Int
TOKEN 29 : )
TOKEN 15 : ->
DATA_TYPE_INT : Int
TOKEN 23 : {
VARIABLE_ACCESS : $xx
TOKEN 27 : =
TOKEN 46 : "abc"
TOKEN 25 : ,
VARIABLE_ACCESS : $cc
TOKEN 27 : =
INTEGER_LITERAL : 10
TOKEN 22 : ;
VARIABLE_DECLARATION : var
IDENTIFIER : a
TOKEN 26 : :
DATA_TYPE_INT : Int
TOKEN 25 : ,
IDENTIFIER : b
TOKEN 27 : =
INTEGER_LITERAL : 10
TOKEN 25 : ,
IDENTIFIER : c
TOKEN 26 : :
TOKEN 30 : [
DATA_TYPE_INT : Int
TOKEN 31 : ]
TOKEN 25 : ,
IDENTIFIER : Dd
TOKEN 26 : :
TOKEN 30 : [
TOKEN 30 : [
TOKEN 30 : [
DATA_TYPE_INT : Int
TOKEN 31 : ]
TOKEN 31 : ]
TOKEN 31 : ]
TOKEN 38 : *
TOKEN 28 : (
INTEGER_LITERAL : 100
TOKEN 29 : )
TOKEN 22 : ;
VARIABLE_ACCESS : $a
TOKEN 27 : =
INTEGER_LITERAL : 10
TOKEN 22 : ;
VARIABLE_ACCESS : $a
TOKEN 13 : ++
TOKEN 22 : ;
PRINT_STATEMENT : print
TOKEN 28 : (
VARIABLE_ACCESS : $a
TOKEN 29 : )
TOKEN 22 : ;
VARIABLE_ACCESS : $a
TOKEN 7 : %=
INTEGER_LITERAL : 19
TOKEN 22 : ;
PRINT_STATEMENT : print
TOKEN 28 : (
VARIABLE_ACCESS : $a
TOKEN 29 : )
TOKEN 22 : ;
VARIABLE_ACCESS : $a
TOKEN 9 : ^=
INTEGER_LITERAL : 9
TOKEN 22 : ;
SWITCH_STATEMENT : switch
TOKEN 28 : (
INTEGER_LITERAL : 1
TOKEN 29 : )
TOKEN 26 : :
TOKEN 23 : {
CASE_STATEMENT : case
INTEGER_LITERAL : 2
TOKEN 26 : :
PRINT_STATEMENT : print
TOKEN 28 : (
TOKEN 46 : "nice"
TOKEN 29 : )
TOKEN 22 : ;
CASE_STATEMENT : case
INTEGER_LITERAL : 1
TOKEN 26 : :
PRINT_STATEMENT : print
TOKEN 28 : (
TOKEN 46 : "nice"
TOKEN 29 : )
TOKEN 22 : ;
TOKEN 24 : }
PRINT_STATEMENT : print
TOKEN 28 : (
VARIABLE_ACCESS : $a
TOKEN 29 : )
TOKEN 22 : ;
IF_STATEMENT : if
TOKEN 28 : (
INTEGER_LITERAL : 9
TOKEN 42 : >
TOKEN 46 : "abc"
TOKEN 29 : )
TOKEN 23 : {
IF_STATEMENT : if
TOKEN 28 : (
INTEGER_LITERAL : 8
TOKEN 42 : >
INTEGER_LITERAL : 9
TOKEN 29 : )
TOKEN 23 : {
VARIABLE_ACCESS : $a
TOKEN 27 : =
INTEGER_LITERAL : 10
TOKEN 22 : ;
TOKEN 24 : }
ELSE_IF_STATEMENT : else if
TOKEN 28 : (
INTEGER_LITERAL : 1
TOKEN 42 : >
INTEGER_LITERAL : 0
TOKEN 29 : )
TOKEN 23 : {
VARIABLE_ACCESS : $a
TOKEN 27 : =
INTEGER_LITERAL : 11
TOKEN 22 : ;
TOKEN 24 : }
TOKEN 24 : }
ELSE_IF_STATEMENT : else if
TOKEN 28 : (
INTEGER_LITERAL : 8
TOKEN 41 : <
INTEGER_LITERAL : 9
TOKEN 29 : )
TOKEN 23 : {
IF_STATEMENT : if
TOKEN 28 : (
FLOAT_LITERAL : 9.001
TOKEN 29 : )
TOKEN 23 : {
PRINT_STATEMENT : print
TOKEN 28 : (
VARIABLE_ACCESS : $b
TOKEN 29 : )
TOKEN 22 : ;
VARIABLE_ACCESS : $b
TOKEN 13 : ++
TOKEN 22 : ;
PRINT_STATEMENT : print
TOKEN 28 : (
VARIABLE_ACCESS : $b
TOKEN 29 : )
TOKEN 22 : ;
TOKEN 24 : }
TOKEN 24 : }
ELSE_STATEMENT : else
TOKEN 23 : {
VARIABLE_ACCESS : $c
TOKEN 27 : =
FLOAT_LITERAL : 11.0
TOKEN 22 : ;
TOKEN 24 : }
FOR_LOOP : for
TOKEN 28 : (
VARIABLE_ACCESS : $a
TOKEN 27 : =
INTEGER_LITERAL : 10
TOKEN 22 : ;
INTEGER_LITERAL : 10
TOKEN 41 : <
INTEGER_LITERAL : 20
TOKEN 22 : ;
VARIABLE_ACCESS : $a
TOKEN 27 : =
INTEGER_LITERAL : 10
TOKEN 29 : )
TOKEN 23 : {
VARIABLE_ACCESS : $a
TOKEN 27 : =
INTEGER_LITERAL : 10
TOKEN 22 : ;
FOR_LOOP : for
TOKEN 28 : (
VARIABLE_ACCESS : $a
TOKEN 27 : =
INTEGER_LITERAL : 10
TOKEN 22 : ;
INTEGER_LITERAL : 10
TOKEN 41 : <
INTEGER_LITERAL : 20
TOKEN 22 : ;
VARIABLE_ACCESS : $a
TOKEN 27 : =
INTEGER_LITERAL : 10
TOKEN 29 : )
TOKEN 23 : {
VARIABLE_ACCESS : $a
TOKEN 27 : =
INTEGER_LITERAL : 20
TOKEN 22 : ;
TOKEN 24 : }
TOKEN 24 : }
PRINT_STATEMENT : print
TOKEN 28 : (
TOKEN 46 : "bipol"
TOKEN 29 : )
TOKEN 22 : ;
TOKEN 24 : }
FUNCTION : func
IDENTIFIER : sub
TOKEN 28 : (
IDENTIFIER : A
TOKEN 26 : :
DATA_TYPE_INT : Int
TOKEN 29 : )
TOKEN 15 : ->
DATA_TYPE_INT : Int
TOKEN 23 : {
DO_LOOP : DO
TOKEN 23 : {
VARIABLE_ACCESS : $a
TOKEN 27 : =
INTEGER_LITERAL : 20
TOKEN 22 : ;
TOKEN 24 : }
WHILE_LOOP : while
TOKEN 28 : (
INTEGER_LITERAL : 2
TOKEN 29 : )
TOKEN 22 : ;
TOKEN 24 : }
FUNCTION : func
IDENTIFIER : main
TOKEN 28 : (
TOKEN 29 : )
TOKEN 15 : ->
DATA_TYPE_DOUBLE : Double
TOKEN 23 : {
WHILE_LOOP : while
TOKEN 28 : (
INTEGER_LITERAL : 3
TOKEN 42 : >
INTEGER_LITERAL : 0
TOKEN 29 : )
TOKEN 23 : {
VARIABLE_ACCESS : $b
TOKEN 27 : =
INTEGER_LITERAL : 19
TOKEN 22 : ;
TOKEN 24 : }
TOKEN 24 : }
