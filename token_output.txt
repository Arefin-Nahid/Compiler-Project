IMPORT_STATEMENT : import
IDENTIFIER : nahid
TOKEN 59 : ,
IDENTIFIER : miraz
TOKEN 56 : ;
CLASS_DECLARATION : Class
IDENTIFIER : nahid
TOKEN 57 : {
VARIABLE_DECLARATION : var
IDENTIFIER : aa
TOKEN 61 : =
INTEGER_LITERAL : 10
TOKEN 59 : ,
IDENTIFIER : cc
TOKEN 61 : =
FLOAT_LITERAL : 10.01
TOKEN 56 : ;
TOKEN 58 : }
TOKEN 56 : ;
CLASS_DECLARATION : Class
IDENTIFIER : Amit
TOKEN 57 : {
VARIABLE_DECLARATION : var
IDENTIFIER : aax
TOKEN 61 : =
INTEGER_LITERAL : 10
TOKEN 59 : ,
IDENTIFIER : ccx
TOKEN 61 : =
FLOAT_LITERAL : 10.01
TOKEN 56 : ;
TOKEN 58 : }
TOKEN 56 : ;
CLASS_DECLARATION : Class
IDENTIFIER : sazid
TOKEN 57 : {
VARIABLE_DECLARATION : var
IDENTIFIER : xxx
TOKEN 60 : :
DATA_TYPE_STRING : String
TOKEN 56 : ;
VARIABLE_ACCESS : $xxx
TOKEN 61 : =
TOKEN 80 : "abc"
TOKEN 56 : ;
TOKEN 58 : }
TOKEN 56 : ;
VARIABLE_DECLARATION : var
IDENTIFIER : xx
TOKEN 60 : :
DATA_TYPE_INT : Int
TOKEN 56 : ;
FUNCTION : func
IDENTIFIER : add
TOKEN 62 : (
IDENTIFIER : A
TOKEN 60 : :
DATA_TYPE_INT : Int
TOKEN 63 : )
TOKEN 49 : ->
DATA_TYPE_INT : Int
TOKEN 57 : {
VARIABLE_ACCESS : $xx
TOKEN 61 : =
TOKEN 80 : "abc"
TOKEN 59 : ,
VARIABLE_ACCESS : $cc
TOKEN 61 : =
INTEGER_LITERAL : 10
TOKEN 56 : ;
VARIABLE_DECLARATION : var
IDENTIFIER : a
TOKEN 60 : :
DATA_TYPE_INT : Int
TOKEN 59 : ,
IDENTIFIER : b
TOKEN 61 : =
INTEGER_LITERAL : 10
TOKEN 59 : ,
IDENTIFIER : c
TOKEN 60 : :
TOKEN 64 : [
DATA_TYPE_INT : Int
TOKEN 65 : ]
TOKEN 59 : ,
IDENTIFIER : Dd
TOKEN 60 : :
TOKEN 64 : [
TOKEN 64 : [
TOKEN 64 : [
DATA_TYPE_INT : Int
TOKEN 65 : ]
TOKEN 65 : ]
TOKEN 65 : ]
TOKEN 72 : *
TOKEN 62 : (
INTEGER_LITERAL : 100
TOKEN 63 : )
TOKEN 56 : ;
VARIABLE_ACCESS : $a
TOKEN 61 : =
INTEGER_LITERAL : 10
TOKEN 56 : ;
VARIABLE_ACCESS : $a
TOKEN 47 : ++
TOKEN 56 : ;
PRINT_STATEMENT : print
TOKEN 62 : (
VARIABLE_ACCESS : $a
TOKEN 63 : )
TOKEN 56 : ;
VARIABLE_ACCESS : $a
TOKEN 41 : %=
INTEGER_LITERAL : 19
TOKEN 56 : ;
PRINT_STATEMENT : print
TOKEN 62 : (
VARIABLE_ACCESS : $a
TOKEN 63 : )
TOKEN 56 : ;
VARIABLE_ACCESS : $a
TOKEN 43 : ^=
INTEGER_LITERAL : 9
TOKEN 56 : ;
SWITCH_STATEMENT : switch
TOKEN 62 : (
INTEGER_LITERAL : 1
TOKEN 63 : )
TOKEN 60 : :
TOKEN 57 : {
CASE_STATEMENT : case
INTEGER_LITERAL : 2
TOKEN 60 : :
PRINT_STATEMENT : print
TOKEN 62 : (
TOKEN 80 : "nice"
TOKEN 63 : )
TOKEN 56 : ;
CASE_STATEMENT : case
INTEGER_LITERAL : 1
TOKEN 60 : :
PRINT_STATEMENT : print
TOKEN 62 : (
TOKEN 80 : "nice"
TOKEN 63 : )
TOKEN 56 : ;
TOKEN 58 : }
PRINT_STATEMENT : print
TOKEN 62 : (
VARIABLE_ACCESS : $a
TOKEN 63 : )
TOKEN 56 : ;
IF_STATEMENT : if
TOKEN 62 : (
INTEGER_LITERAL : 9
TOKEN 76 : >
TOKEN 80 : "abc"
TOKEN 63 : )
TOKEN 57 : {
IF_STATEMENT : if
TOKEN 62 : (
INTEGER_LITERAL : 8
TOKEN 76 : >
INTEGER_LITERAL : 9
TOKEN 63 : )
TOKEN 57 : {
VARIABLE_ACCESS : $a
TOKEN 61 : =
INTEGER_LITERAL : 10
TOKEN 56 : ;
TOKEN 58 : }
ELSE_IF_STATEMENT : else if
TOKEN 62 : (
INTEGER_LITERAL : 1
TOKEN 76 : >
INTEGER_LITERAL : 0
TOKEN 63 : )
TOKEN 57 : {
VARIABLE_ACCESS : $a
TOKEN 61 : =
INTEGER_LITERAL : 11
TOKEN 56 : ;
TOKEN 58 : }
TOKEN 58 : }
ELSE_IF_STATEMENT : else if
TOKEN 62 : (
INTEGER_LITERAL : 8
TOKEN 75 : <
INTEGER_LITERAL : 9
TOKEN 63 : )
TOKEN 57 : {
IF_STATEMENT : if
TOKEN 62 : (
FLOAT_LITERAL : 9.001
TOKEN 63 : )
TOKEN 57 : {
PRINT_STATEMENT : print
TOKEN 62 : (
VARIABLE_ACCESS : $b
TOKEN 63 : )
TOKEN 56 : ;
VARIABLE_ACCESS : $b
TOKEN 47 : ++
TOKEN 56 : ;
PRINT_STATEMENT : print
TOKEN 62 : (
VARIABLE_ACCESS : $b
TOKEN 63 : )
TOKEN 56 : ;
TOKEN 58 : }
TOKEN 58 : }
ELSE_STATEMENT : else
TOKEN 57 : {
VARIABLE_ACCESS : $c
TOKEN 61 : =
FLOAT_LITERAL : 11.0
TOKEN 56 : ;
TOKEN 58 : }
FOR_LOOP : for
TOKEN 62 : (
VARIABLE_ACCESS : $a
TOKEN 61 : =
INTEGER_LITERAL : 10
TOKEN 56 : ;
INTEGER_LITERAL : 10
TOKEN 75 : <
INTEGER_LITERAL : 20
TOKEN 56 : ;
VARIABLE_ACCESS : $a
TOKEN 61 : =
INTEGER_LITERAL : 10
TOKEN 63 : )
TOKEN 57 : {
VARIABLE_ACCESS : $a
TOKEN 61 : =
INTEGER_LITERAL : 10
TOKEN 56 : ;
FOR_LOOP : for
TOKEN 62 : (
VARIABLE_ACCESS : $a
TOKEN 61 : =
INTEGER_LITERAL : 10
TOKEN 56 : ;
INTEGER_LITERAL : 10
TOKEN 75 : <
INTEGER_LITERAL : 20
TOKEN 56 : ;
VARIABLE_ACCESS : $a
TOKEN 61 : =
INTEGER_LITERAL : 10
TOKEN 63 : )
TOKEN 57 : {
VARIABLE_ACCESS : $a
TOKEN 61 : =
INTEGER_LITERAL : 20
TOKEN 56 : ;
TOKEN 58 : }
TOKEN 58 : }
PRINT_STATEMENT : print
TOKEN 62 : (
TOKEN 80 : "bipol"
TOKEN 63 : )
TOKEN 56 : ;
TOKEN 58 : }
FUNCTION : func
IDENTIFIER : sub
TOKEN 62 : (
IDENTIFIER : A
TOKEN 60 : :
DATA_TYPE_INT : Int
TOKEN 63 : )
TOKEN 49 : ->
DATA_TYPE_INT : Int
TOKEN 57 : {
DO_LOOP : DO
TOKEN 57 : {
VARIABLE_ACCESS : $a
TOKEN 61 : =
INTEGER_LITERAL : 20
TOKEN 56 : ;
TOKEN 58 : }
WHILE_LOOP : while
TOKEN 62 : (
INTEGER_LITERAL : 2
TOKEN 63 : )
TOKEN 56 : ;
TOKEN 58 : }
FUNCTION : func
IDENTIFIER : main
TOKEN 62 : (
TOKEN 63 : )
TOKEN 49 : ->
DATA_TYPE_DOUBLE : Double
TOKEN 57 : {
WHILE_LOOP : while
TOKEN 62 : (
INTEGER_LITERAL : 3
TOKEN 76 : >
INTEGER_LITERAL : 0
TOKEN 63 : )
TOKEN 57 : {
VARIABLE_ACCESS : $b
TOKEN 61 : =
INTEGER_LITERAL : 19
TOKEN 56 : ;
TOKEN 58 : }
TOKEN 58 : }
